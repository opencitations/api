#url /api/v1
#type api
#base https://test.opencitations.org/index
#title The unifying REST API for all the OpenCitations Indexes
#description This document describe the REST API for accessing the data stored in all the [OpenCitations Indexes](https://w3id.org/oc/index) hosted by [OpenCitations](http://opencitations.net). This API implements operations to retrieve the citation data for all the references to other works appearing in a particular bibliographic entity, or the citation data for all the references appearing in other works to a particular bibliographic entity, given the DOI of a bibliographic entity, or to retrieve citation data about a particular citation identified by means of its [Open Citation Identifier (OCI)](https://opencitations.wordpress.com/2018/03/12/citations-as-first-class-data-entities-open-citation-identifiers/).

All the present operations return either a JSON document (default) or a CSV document according to the mimetype specified in the `Accept` header of the request. If you would like to suggest an additional operation to be included in this API, please use the [issue tracker](https://github.com/opencitations/api/issues) of the OpenCitations APIs available on GitHub.

If you are going to use the REST APIs within an application/code, we encourage you to get the [OpenCitations Access Token](https://opencitations.net/accesstoken) and specify it in the "authorization" header of your REST API call. Here is a usage example in Python:

<pre style="height: 150px"><code>
from requests import get

API_CALL = "https://opencitations.net/index/api/v1/references/10.1186/1756-8722-6-59"
HTTP_HEADERS = {"authorization": "YOUR-OPENCITATIONS-ACCESS-TOKEN"}

get(API_CALL, headers=HTTP_HEADERS)
</code></pre>

#version Version 1.1.0 (2020-03-25)
#contacts [contact@opencitations.net](mailto:contact@opencitations.net)
#license This document is licensed with a [Creative Commons Attribution 4.0 International License](https://creativecommons.org/licenses/by/4.0/legalcode), while the REST API itself has been created using [RAMOSE](https://github.com/opencitations/ramose), the *Restful API Manager Over SPARQL Endpoints* created by [Silvio Peroni](https://orcid.org/0000-0003-0530-4305), which is licensed with an [ISC license](https://opensource.org/licenses/ISC).
#endpoint http://127.0.0.1/index/sparql
#method post
#addon indexapi_v1

#url /references/{doi}
#type operation
#doi str(10\..+)
#preprocess lower(doi) --> encode(doi)
#postprocess decode_doi(citing, cited) --> merge(source, citing, cited)
#method get
#description This operation retrieves the citation data for all the outgoing references to other cited works appearing in the reference list of the bibliographic entity identified by the input DOI.

The fields returned by this operation are:

* *oci*: the Open Citation Identifier (OCI) of the citation in consideration;
* *citing*: the DOI of the citing entity;
* *cited*: the DOI of the cited entity;
* *creation*: the creation date of the citation according to the [ISO date format](https://en.wikipedia.org/wiki/ISO_8601) `YYYY-MM-DD`, which corresponds to the publication date of the citing entity;
* *timespan*: the interval between the publication date of the cited entity and the publication date of the citing entity, expressed using the [XSD duration format](https://www.w3.org/TR/xmlschema11-2/#duration) `PnYnMnD`;
* *journal_sc*: it records whether the citation is a journal self-citations (i.e. the citing and the cited entities are published in the same journal);
* *author_sc*: it records whether the citation is an author self-citation (i.e. the citing and the cited entities have at least one author in common).

The values of all the fields are prefixed with `[index name] => `, so as to cleary identify from where the related data is coming, and can contain one or more information, separated by `; `. This is particularly useful when a citation is actually contained in two or more OpenCitations Indexes. In this case, only one row will be returned, and the prefix used in the various data allows one to understand the source Index of such data.
#call /references/10.1186/1756-8722-6-59
#output_json [
    {
        "oci": "coci => 02001010806360107050663080702026306630509-0200101080636102703040309",
        "citing": "coci => 10.1186/1756-8722-6-59",
        "cited": "coci => 10.1186/ar3439",
        "creation": "coci => 2013",
        "timespan": "coci => P2Y",
        "journal_sc": "coci => no",
        "author_sc": "coci => no"
    },
    {
        "oci": "coci => 02001010806360107050663080702026306630509-0200101080636102704000806",
        "citing": "coci => 10.1186/1756-8722-6-59",
        "cited": "coci => 10.1186/ar4086",
        "creation": "coci => 2013",
        "timespan": "coci => P1Y",
        "journal_sc": "coci => no",
        "author_sc": "coci => no"
    },
    {
        "oci": "coci => 02001010806360107050663080702026306630509-020010200003619122437020001023704023707090006",
        "citing": "coci => 10.1186/1756-8722-6-59",
        "cited": "coci => 10.1200/jco.2012.42.7906",
        "creation": "coci => 2013",
        "timespan": "coci => P0Y",
        "journal_sc": "coci => no",
        "author_sc": "coci => no"
    },
    {
        "oci": "coci => 02001010806360107050663080702026306630509-02003010009360008080300010805370200010237060604070907",
        "citing": "coci => 10.1186/1756-8722-6-59",
        "cited": "coci => 10.3109/08830185.2012.664797",
        "creation": "coci => 2013",
        "timespan": "coci => P0Y",
        "journal_sc": "coci => no",
        "author_sc": "coci => no"
    }
]
#field_type str(oci) str(citing) str(cited) datetime(creation) duration(timespan) str(?journal_sc) str(?author_sc)
#sparql PREFIX cito: <http://purl.org/spar/cito/>
SELECT ?source ?oci ?citing ?cited ?creation ?timespan (IF(bound(?jsc), "yes", "no") as ?journal_sc) (IF(bound(?asc), "yes", "no") as ?author_sc)
WHERE {
  	  VALUES ?citing_iri {<https://doi.org/[[doi]]> <http://dx.doi.org/[[doi]]>} .
      GRAPH ?g {

          ?citing_iri ^cito:hasCitingEntity ?oci_iri .
          ?oci_iri
              cito:hasCitedEntity ?cited_iri ;
              cito:hasCitationCreationDate ?creation .

          OPTIONAL {
              ?oci_iri cito:hasCitationTimeSpan ?timespan .
          }

          OPTIONAL {
              ?oci_iri a cito:JournalSelfCitation .
              BIND("yes" as ?jsc)
          }

          OPTIONAL {
              ?oci_iri a cito:AuthorSelfCitation .
              BIND("yes" as ?asc)
          }

          BIND(STRAFTER(str(?citing_iri), ".org/") AS ?citing)
          BIND(STRAFTER(str(?cited_iri), ".org/") AS ?cited)
          BIND(STRAFTER(str(?oci_iri), "/ci/") AS ?oci)
    	    BIND(STRAFTER(str(?g), "/index/") AS ?source)
      }
}
LIMIT 50000

#url /citations/{doi}
#type operation
#doi str(10\..+)
#preprocess lower(doi) --> encode(doi)
#postprocess decode_doi(citing, cited) --> merge(source, citing, cited)
#method get
#description This operation retrieves the citation data for all the references appearing in the reference lists of other citing works to the bibliographic entity identified by the input DOI, that constitute the incoming citations of that identified bibliographic entity.

The fields returned by this operation are:

* *oci*: the Open Citation Identifier (OCI) of the citation in consideration;
* *citing*: the DOI of the citing entity;
* *cited*: the DOI of the cited entity;
* *creation*: the creation date of the citation according to the [ISO date format](https://en.wikipedia.org/wiki/ISO_8601) `YYYY-MM-DD`, which corresponds to the publication date of the citing entity;
* *timespan*: the interval between the publication date of the cited entity and the publication date of the citing entity, expressed using the [XSD duration format](https://www.w3.org/TR/xmlschema11-2/#duration) `PnYnMnD`;
* *journal_sc*: it records whether the citation is a journal self-citations (i.e. the citing and the cited entities are published in the same journal);
* *author_sc*: it records whether the citation is an author self-citation (i.e. the citing and the cited entities have at least one author in common).

The values of all the fields are prefixed with `[index name] => `, so as to cleary identify from where the related data is coming, and can contain one or more information, separated by `; `. This is particularly useful when a citation is actually contained in two or more OpenCitations Indexes. In this case, only one row will be returned, and the prefix used in the various data allows one to understand the source Index of such data.
#call /citations/10.1002/adfm.201505328
#output_json [
    {
        "oci": "coci => 0200100030836231029271431221029283702000106370908-02001000002361013152237020001050005030208",
        "citing": "coci => 10.1038/natrevmats.2016.98",
        "cited": "coci => 10.1002/adfm.201505328",
        "creation": coci/"2017-01-17",
        "timespan": "coci => P11M"
        "journal_sc": "coci => no",
        "author_sc": "coci => no"
    },
    {
        "oci": "coci => 02001000002361013221037020001070002060708-02001000002361013152237020001050005030208",
        "citing": "coci => 10.1002/adma.201702678",
        "cited": "coci => 10.1002/adfm.201505328",
        "creation": "coci => 2017-07-25",
        "timespan": "coci => P1Y5M8D"
        "journal_sc": "coci => no",
        "author_sc": "coci => no"
    },
    {
        "oci": "coci => 020010003083623142314271634370200010737010005-02001000002361013152237020001050005030208",
        "citing": "coci => 10.1038/nenergy.2017.105",
        "cited": "coci => 10.1002/adfm.201505328",
        "creation": "coci => 2017-07-10",
        "timespan": "coci => P1Y4M23D"
        "journal_sc": "coci => no",
        "author_sc": "coci => no"
    }
]
#field_type str(oci) str(citing) str(cited) datetime(creation) duration(timespan) str(?journal_sc) str(?author_sc)
#sparql PREFIX cito: <http://purl.org/spar/cito/>
SELECT ?source ?oci ?citing ?cited ?creation ?timespan (IF(bound(?jsc), "yes", "no") as ?journal_sc) (IF(bound(?asc), "yes", "no") as ?author_sc)
WHERE {
      VALUES ?cited_iri {<https://doi.org/[[doi]]> <http://dx.doi.org/[[doi]]>} .
      GRAPH ?g {

          ?cited_iri ^cito:hasCitedEntity ?oci_iri .
          ?oci_iri
              cito:hasCitingEntity ?citing_iri ;
              cito:hasCitationCreationDate ?creation .

          OPTIONAL {
              ?oci_iri cito:hasCitationTimeSpan ?timespan .
          }

          OPTIONAL {
              ?oci_iri a cito:JournalSelfCitation .
              BIND("yes" as ?jsc)
          }

          OPTIONAL {
              ?oci_iri a cito:AuthorSelfCitation .
              BIND("yes" as ?asc)
          }

          BIND(STRAFTER(str(?citing_iri), ".org/") AS ?citing)
          BIND(STRAFTER(str(?cited_iri), ".org/") AS ?cited)
          BIND(STRAFTER(str(?oci_iri), "/ci/") AS ?oci)
          BIND(STRAFTER(str(?g), "/index/") AS ?source)
      }
}
LIMIT 50000

#url /citation/{oci}
#type operation
#oci str([0-9]+-[0-9]+)
#method get
#postprocess decode_doi(citing, cited) --> merge(source, citing, cited)
#description This operation retrieves the citation metadata for the citation identified by the input Open Citation Identifier (OCI).

The Open Citation Identifier is a globally unique persistent identifier for bibliographic citations, which has a simple structure: the lower-case letters "oci" followed by a colon, followed by two numbers separated by a dash. For example, `oci:1-18` is a valid OCI.

It is worth mentioning that, in this REST operation, the prefix "oci:" **should not** be specified, and only the dash-separated numbers of the OCI should be provided, as shown in the example below.

The fields returned by this operation are:

* *oci*: the Open Citation Identifier (OCI) of the citation in consideration;
* *citing*: the DOI of the citing entity;
* *cited*: the DOI of the cited entity;
* *creation*: the creation date of the citation according to the [ISO date format](https://en.wikipedia.org/wiki/ISO_8601) `YYYY-MM-DD`, which corresponds to the publication date of the citing entity;
* *timespan*: the interval between the publication date of the cited entity and the publication date of the citing entity, expressed using the [XSD duration format](https://www.w3.org/TR/xmlschema11-2/#duration) `PnYnMnD`;
* *journal_sc*: it records whether the citation is a journal self-citations (i.e. the citing and the cited entities are published in the same journal);
* *author_sc*: it records whether the citation is an author self-citation (i.e. the citing and the cited entities have at least one author in common).

The values of all the fields are prefixed with `[index name] => `, so as to cleary identify from where the related data is coming, and can contain one or more information, separated by `; `. This is particularly useful when a citation is actually contained in two or more OpenCitations Indexes. In this case, only one row will be returned, and the prefix used in the various data allows one to understand the source Index of such data.
#call /citation/02001010806360107050663080702026306630509-0200101080636102704000806
#output_json [
    {
        "oci": "coci => 02001010806360107050663080702026306630509-0200101080636102704000806",
        "citing": "coci => 10.1186/1756-8722-6-59",
        "cited": "coci => 10.1186/ar4086",
        "creation": "coci => 2013",
        "timespan": "coci => P1Y",
        "journal_sc": "coci => no",
        "author_sc": "coci => no"
    }
]
#field_type str(oci) str(citing) str(cited) datetime(creation) duration(timespan) str(?journal_sc) str(?author_sc)
#sparql PREFIX cito: <http://purl.org/spar/cito/>
SELECT ?source ?oci ?citing ?cited ?creation ?timespan (IF(bound(?jsc), "yes", "no") as ?journal_sc) (IF(bound(?asc), "yes", "no") as ?author_sc)
WHERE {
      VALUES ?oci_iri {<https://w3id.org/oc/index/doci/ci/[[oci]]> <https://w3id.org/oc/index/coci/ci/[[oci]]>} .
      GRAPH ?g {

          ?oci_iri
              cito:hasCitingEntity ?citing_iri ;
              cito:hasCitedEntity ?cited_iri ;
              cito:hasCitationCreationDate ?creation .

          OPTIONAL {
              ?oci_iri cito:hasCitationTimeSpan ?timespan .
          }

          OPTIONAL {
              ?oci_iri a cito:JournalSelfCitation .
              BIND("yes" as ?jsc)
          }

          OPTIONAL {
              ?oci_iri a cito:AuthorSelfCitation .
              BIND("yes" as ?asc)
          }

          BIND(STRAFTER(str(?citing_iri), ".org/") AS ?citing)
          BIND(STRAFTER(str(?cited_iri), ".org/") AS ?cited)
          BIND(STRAFTER(str(?oci_iri), "/ci/") AS ?oci)
          BIND(STRAFTER(str(?g), "/index/") AS ?source)
      }
}
LIMIT 50000

#url /metadata/{dois}
#type operation
#dois str(\"?10\..+[^_\"]((__|\" \")10\..+[^_])*\"?)
#preprocess lower(dois) --> encode(dois) --> split_dois(dois)
#postprocess oc_coci_references() --> metadata() --> oalink() --> decode_doi(doi, reference, citation)
#method get
#description This operation retrieves the bibliographic metadata for each of the bibliographic entities identified by one or more input DOIs.

It is possible to specify one or more DOIs as input of this operation. In this case, the DOI should be separated with a double underscore ("\_\_") – e.g. "10.1108/jd-12-2013-0166\_\_10.1016/j.websem.2012.08.001\_\_...". The fields returned by this operation are:

* *author*: the semicolon-separated list of authors of the bibliographic entity;
* *year*: the year of publication of the bibliographic entity;
* *title*: the title of the bibliographic entity;
* *source_title*: the title of the venue where the bibliographic entity has been published;
* *source_id*: the semicolon-separated list of identifiers referring to the source where the bibliographic entity has been published;
* *volume*: the number of the volume in which the bibliographic entity has been published;
* *issue*: the number of the issue in which the bibliographic entity has been published;
* *page*: the starting and ending pages of the bibliographic entity in the context of the venue where it has been published;
* *doi*: the DOI of the bibliographic entity;
* *reference*: the semicolon-separated DOIs of all the entities cited by the bibliographic entity, according to the citation data available in all the OpenCitations Indexes;
* *citation*: the semicolon-separated DOIs of all the entities that cite the bibliographic entity, according to the citation data available in all the OpenCitations Indexes;
* *citation_count*: the number of citations received by the bibliographic entity;
* *oa_link*: the link to the Open Access version of the bibliographic entity, if available.

Note: this operation strictly depends on external services (i.e. doi.org and associate applications) for gathering all the metadata of the articles requested. In fact, these metadata are not stored in COCI and are retrieved dynamically upon request.
#call /metadata/10.1108/jd-12-2013-0166__10.1007/s11192-019-03217-6
#field_type str(author) datetime(year) str(title) str(source_title) str(source_id) str(volume) str(issue) str(page) str(doi) str(reference) str(citation) int(citation_count) str(oa_link)
#output_json [
    {
        "citation": "10.1177/0961000615616450; 10.7554/elife.32822; 10.1145/3197026.3197050; 10.1093/bib/bbx057; 10.1007/978-3-319-68204-4_19; 10.3346/jkms.2015.30.11.1545; 10.1007/978-3-319-73165-0_24; 10.3233/sw-160224; 10.3233/sw-180307; 10.1007/978-3-319-90548-8_7; 10.1142/s021964921850034x; 10.1007/978-3-319-58694-6_23; 10.1057/s41275-017-0070-x",
        "reference": "10.1001/jama.295.1.90; 10.1002/asi.4630240406; 10.1002/(sici)1097-4571(198909)40:5<342::aid-asi7>3.0.co;2-u; 10.1007/bf02457980; 10.1007/s10579-012-9211-2; 10.1007/s11192-009-0021-2; 10.1016/j.websem.2012.08.001; 10.1016/j.websem.2013.05.001; 10.1023/a:1021919228368; 10.1038/35079151; 10.1038/495437a; 10.1038/502295a; 10.1038/502298a; 10.1042/bj20091474; 10.1073/pnas.0407743101; 10.1087/2009202; 10.1093/bioinformatics; 10.1101/sqb.1972.036.01.015; 10.1108/eum0000000007123; 10.1108/jd-07-2012-0082; 10.1126/science.149.3683.510; 10.1136/bmj.a568; 10.1136/bmj.b2680; 10.1145/1498765.1498780; 10.1177/030631277400400102; 10.1177/030631277500500106; 10.1371/journal.pcbi.0010034; 10.1371/journal.pcbi.1000361; 10.1371/journal.pntd.0000228; 10.1371/journal.pone.0000308; 10.1523/jneurosci.0003-08.2008; 10.1525/bio.2010.60.5.2; 10.3115/1610075.1610091; 10.5210/fm.v2i4.522; 10.5539/ass.v9n5p18; 10.7717/peerj.175",
        "author": "Peroni, Silvio; Dutton, Alexander; Gray, Tanya; Shotton, David",
        "volume": "71",
        "page": "253-277",
        "citation_count": "13",
        "source_id": "issn:0022-0418",
        "source_title": "Journal Of Documentation",
        "year": "2015",
        "oa_link": "",
        "doi": "10.1108/jd-12-2013-0166",
        "title": "Setting Our Bibliographic References Free: Towards Open Citation Data",
        "issue": "2"
    },
    {
        "citation": "10.2964/jsik_2020_003; 10.1007/s11192-019-03311-9; 10.1162/qss_a_00023; 10.1007/s11192-020-03690-4; 10.5712/rbmfc15(42)2671; 10.1007/978-3-030-62466-8_28; 10.7717/peerj-cs.421; 10.1111/cts.13067; 10.3897/rio.7.e66264; 10.1162/qss_a_00112; 10.1093/gigascience/giab003; 10.3233/sw-210439; 10.3989/arbor.2021.799007; 10.1007/s11192-021-04097-5; 10.1016/b978-0-12-823723-6.00001-x; 10.3145/thinkepi.2021.e15e04; 10.1007/s11192-021-04191-8; 10.1007/978-3-030-96957-8_9; 10.1093/llc/fqac016; 10.1007/978-3-031-06981-9_18; 10.1371/journal.pone.0270872; 10.1007/s11192-022-04367-w; 10.7717/peerj.13712; 10.1145/3529372.3530953; 10.1162/qss_a_00203; 10.1007/s11192-022-04581-6; 10.1145/3540250.3549172; 10.1186/s12916-022-02644-2; 10.1093/reseval/rvac037",
        "reference": "10.1007/978-3-030-00668-6_8; 10.1007/978-3-319-11955-7_42; 10.1007/978-3-319-11964-9_4; 10.1007/978-3-319-17966-7_10; 10.1007/978-3-319-46547-0_16; 10.1007/978-3-319-53637-8_6; 10.1007/978-3-319-68204-4_19; 10.1007/s11192-009-0146-3; 10.1016/j.websem.2012.08.001; 10.1038/nature.2017.21800; 10.1038/sdata.2016.18; 10.3233/ds-190016; 10.3233/sw-150197; 10.4103/0976-500x.85940; 10.6084/m9.figshare.3443876; 10.6084/m9.figshare.6683855; 10.6084/m9.figshare.7127816; 10.6084/m9.figshare.7873559; 10.7717/peerj.4201",
        "author": "Shotton, D M, 0000-0001-5506-523; Peroni, Silvio, 0000-0003-0530-4305; Heibi, Ivan, 0000-0001-5366-5194",
        "volume": "121",
        "page": "1213-1228",
        "citation_count": "29",
        "source_id": "issn:1588-2861",
        "source_title": "Scientometrics"
        "year": "2019",
        "oa_link": "",
        "doi": "10.1007/s11192-019-03217-6",
        "title": "Software Review: COCI, The OpenCitations Index Of Crossref Open DOI-to-DOI Citations",
        "issue": "2"
    }
]
#sparql PREFIX cito: <http://purl.org/spar/cito/>
SELECT ?doi (count(?c) as ?citation_count) (GROUP_CONCAT(?citing_source; separator="; ") as ?citation) {
        VALUES ?doi { [[dois]] }
        BIND(IRI(CONCAT("http://dx.doi.org/", ?doi)) as ?val)
	  	  OPTIONAL{
  			    ?val ^cito:hasCitedEntity ?c .
    	      ?c cito:hasCitingEntity ?source .
    	      BIND(STRAFTER(str(?source), "http://dx.doi.org/") as ?citing_source)
  		  }
} GROUP BY ?doi

#url /citation-count/{doi}
#type operation
#doi str(10\..+)
#preprocess lower(doi) --> encode(doi)
#method get
#description This operation retrieves the number of incoming citations to the bibliographic entity identified by the input DOI.

The field returned by this operation is:

* *count*: the number of incoming citations to the input bibliographic entity.
#call /citation-count/10.1142/9789812701527_0009
#field_type int(count)
#output_json [
    {
        "count": "32"
    }
]
#sparql PREFIX cito: <http://purl.org/spar/cito/>
SELECT (count(DISTINCT ?citing_id) as ?count)
WHERE {
    VALUES ?cited {<https://doi.org/[[doi]]> <http://dx.doi.org/[[doi]]>} .
    ?cited ^cito:hasCitedEntity/cito:hasCitingEntity ?citing .
    BIND(STRAFTER(str(?citing), ".org/") as ?citing_id)
}

#url /reference-count/{doi}
#type operation
#doi str(10\..+)
#preprocess lower(doi) --> encode(doi)
#method get
#description This operation retrieves the number of outgoing citations from the bibliographic entity identified by the input DOI.

The field returned by this operation is:

* *count*: the number of outgoing citations from the input bibliographic entity.
#call /reference-count/10.1016/j.websem.2012.08.001
#field_type int(count)
#output_json [
    {
        "count": "13"
    }
]
#sparql PREFIX cito: <http://purl.org/spar/cito/>
SELECT (count(DISTINCT ?cited_id) as ?count)
WHERE {
    VALUES ?citing {<https://doi.org/[[doi]]> <http://dx.doi.org/[[doi]]>} .
    ?citing ^cito:hasCitingEntity/cito:hasCitedEntity ?cited .
    BIND(STRAFTER(str(?cited), ".org/") as ?cited_id)
}

#url /test/{omid}
#type operation
#omid str(br\/.+)
#preprocess lower(omid) --> encode(omid)
#method get
#description This operation retrieves the number of outgoing citations f>

The field returned by this operation is:

* *count*: the number of outgoing citations from the input bibliographic>
#call /test/br/0601000
#field_type int(count)
#output_json [
    {
        "count": "13"
    }
]
#sparql PREFIX cito: <http://purl.org/spar/cito/>
SELECT (count(?cited) as ?count)
WHERE {
    ?oci cito:hasCitingEntity <https://w3id.org/oc/meta/[[omid]]> .
    ?oci cito:hasCitedEntity ?cited .
}

#url /citation-count-uniindex/{doi}
#type operation
#doi str(10\..+)
#preprocess lower(doi) --> get_omid_of_doi(doi)
#method get
#description This operation retrieves the number of outgoing citations f>

The field returned by this operation is:

* *count*: the number of outgoing citations from the input bibliographic>
#call /citation-count-uniindex/10.1142/9789812701527_0009
#field_type int(count)
#output_json [
    {
        "count": "32"
    }
]
#sparql PREFIX cito: <http://purl.org/spar/cito/>
SELECT (count(?citing) as ?count)
WHERE {
    ?oci cito:hasCitedEntity <https://w3id.org/oc/meta/br/[[doi]]> .
    ?oci cito:hasCitingEntity ?citing .
}

#url /reference-count-uniindex/{doi}
#type operation
#doi str(10\..+)
#preprocess lower(doi) --> get_omid_of_doi(doi)
#method get
#description This operation retrieves the number of outgoing citations f>

The field returned by this operation is:

* *count*: the number of outgoing citations from the input bibliographic>
#call /reference-count-uniindex/10.1186/1756-8722-6-59
#field_type int(count)
#output_json [
    {
        "count": "75"
    }
]
#sparql PREFIX cito: <http://purl.org/spar/cito/>
SELECT (count(?cited) as ?count)
WHERE {
    ?oci cito:hasCitingEntity <https://w3id.org/oc/meta/br/[[doi]]> .
    ?oci cito:hasCitedEntity ?cited .
}
